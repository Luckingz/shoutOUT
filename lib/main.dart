// main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // This file is generated by `flutterfire configure`
import 'auth_wrapper.dart'; // <-- Used as the main home screen
import 'models/user.dart';
import 'models/crime_report.dart';
import 'services/auth_service.dart';
import 'services/report_service.dart';
import 'services/notification_service.dart';
import 'services/bluetooth_service.dart';
import 'services/connectivity_service.dart';
import 'screens/splash_screen.dart';
import 'screens/auth/login_screen.dart';
import 'screens/citizen/citizen_home.dart';
import 'screens/security/security_home.dart';


// 2. MAKE main() ASYNC AND INITIALIZE FIREBASE
void main() async {
  // IMPORTANT: Must be called when using platform plugins (like shared_preferences or connectivity_plus)
  // And must be called before Firebase.initializeApp()
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase with platform-specific options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp()); // Added const for best practice
}

class MyApp extends StatelessWidget {
  const MyApp({super.key}); // Added const constructor

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        // Ensure the services are using the Firebase implementation we're about to write
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => ConnectivityService()),
        ChangeNotifierProvider(create: (_) => ReportService()),
        ChangeNotifierProvider(create: (_) => NotificationService()),
        ChangeNotifierProvider(create: (_) => BleService()),
      ],
      child: MaterialApp(
        title: 'Crime Alert',
        theme: ThemeData(
          primarySwatch: Colors.indigo, // Changed to indigo for consistency with security_home
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),

        // ************************************************
        // CHANGE: Use AuthWrapper to decide the initial screen
        home: const AuthWrapper(),
        // ************************************************

        // Keeping named routes for internal navigation, but the AuthWrapper handles the app's entry point.
        routes: {
          '/login': (context) => LoginScreen(),
          '/citizen-home': (context) => CitizenHome(),
          '/security-home': (context) => SecurityHome(),
        },
      ),
    );
  }
}